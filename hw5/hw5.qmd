---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 20 @ 11:59PM
author: "Sophia Luo, 106409469"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

```{r}
library(tidyverse)
library(tidymodels)
library(gtsummary)
library(ggplot2)
library(recipes) # Data Preprocessing
library(glmnet) # Logistic Regression
library(caret) # Random Forest
library(ranger) # Random Forest
library(xgboost) # XGBoost
library(stacks) # model stacking
library(broom) # extract model coefficients
```

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 


### 1. Data preprocessing and feature engineering.

```{r Select Features & Target}
# Load Data
cohort_data <- readRDS("../hw4/mimiciv_shiny/mimic_icu_cohort.rds")

# Select Features & Target
mimiciv_icu_cohort <- cohort_data |>
  select(
    subject_id, hadm_id, stay_id,
    
    los_long, # Target variable (ICU stay > 2 days)
    
    # Demographics
    gender, age_intime, marital_status, race,
    
    # ICU admission
    first_careunit,
    
    # Lab measurements (Last before ICU)
    bicarbonate, chloride, creatinine, glucose, hematocrit, 
    potassium, sodium, wbc,
    
    # Vital measurements (First in ICU)
    heart_rate, non_invasive_blood_pressure_diastolic, 
    non_invasive_blood_pressure_systolic, respiratory_rate, 
    temperature_fahrenheit
  ) |>
  # Convert categorical variables to factors
  mutate(
    gender = as.factor(gender),
    marital_status = as.factor(marital_status),
    race = as.factor(tolower(race))
  ) |>
  drop_na(los_long) |>
  print(width = Inf)
```

```{r Check for missing values}
# Check for missing values
mimiciv_icu_cohort |> tbl_summary(by = los_long)
```

There are missing values in `marital_status`, lab measurements, and vital measurements.
Missing values are visualized before deciding how to handle them.


```{r visualize distribution of continuous variable with missing value}
numeric_cols <- select(mimiciv_icu_cohort |>
                         select(-subject_id, -hadm_id, -stay_id, -los_long, 
                                -gender, -age_intime, -race, -first_careunit), 
                where(is.numeric))  # Select numeric columns

# Loop through each numeric column and create a histogram
for (col in names(numeric_cols)) {
  p <- ggplot(mimiciv_icu_cohort, 
              aes_string(x = col)) +
    geom_histogram(binwidth = 10, fill = "skyblue", 
                   color = "black", alpha = 0.7) +
    labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
    theme_minimal()
  print(p)
}
```

Mean imputation should be used for normally distributed variables, `bicarbonate`, `chloride`, `hematocrit`, `sodium`, and `heart_rate`.

Median imputation should be used for skewed variables, `creatinine`, `glucose`, `potassium`, `wbc`, `non_invasive_blood_pressure_diastolic`, `non_invasive_blood_pressure_systolic`, `respiratory_rate`, and `temperature_fahrenheit`.

```{r visualize distribution of categorical variable with missing value}
ggplot(mimiciv_icu_cohort, aes(x = marital_status)) +
  geom_bar() +
  labs(title = "Bar plot of Age at ICU Intime by LOS Long",
       x = "Marital Status") +
  theme_minimal()
```

KNN imputation should be used for categorical variables, `marital_status`.

```{r}
rm(cohort_data)
gc()
```

### 2. Partition data into 50% training set and 50% test set. 

Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id) |>
  # remove subject_id, hadm_id, stay_id
  select(-subject_id, -hadm_id, -stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )

# data_split
mimiciv_icu_cohort_train <- training(data_split)
dim(mimiciv_icu_cohort_train)
mimiciv_icu_cohort_test <- testing(data_split)
dim(mimiciv_icu_cohort_test)
```

```{r}
rm(mimiciv_icu_cohort)
gc()
```

### 3. Train and tune the models using the training set.

#### Logistic regression with enet regularization

```{r logistic regression preprocessing}
logit_rec <- recipe(los_long ~ ., data = mimiciv_icu_cohort_train) |>
  # Mean inputation for normal variables
  step_impute_mean(bicarbonate, chloride, hematocrit, sodium, heart_rate) |>
  
  # Median imputation for skewed variables
  step_impute_median(creatinine, glucose, potassium, wbc, 
                     non_invasive_blood_pressure_diastolic, 
                     non_invasive_blood_pressure_systolic, 
                     respiratory_rate, temperature_fahrenheit) |>
  
  # KNN imputation for categorical variables
  step_impute_knn(marital_status) |>
  
  # create traditional dummy variables
  step_dummy(all_nominal_predictors()) |>
  # zero-variance filter
  step_zv(all_nominal_predictors()) |>
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  print()
```

```{r logistic regression model}
logit_mod <- logistic_reg(
  penalty = tune(),
  mixture = tune()
) |>
  set_engine("glmnet", standardize = FALSE) |>
  print()
```

```{r logistic regression workflow}
logit_wf <- workflow() |>
  add_recipe(logit_rec) |>
  add_model(logit_mod) |>
  print()
```

```{r logistic regression grid}
logit_grid <- grid_regular(
  penalty(range = c(-4, 1)),
  mixture(),
  levels = c(50, 5)
  ) |>
  print()
```

```{r cross-validation}
set.seed(203)

folds <- vfold_cv(mimiciv_icu_cohort_train, v = 5, strata = los_long)
folds
```

```{r fit cross validation}
logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = logit_grid,
    metrics = metric_set(roc_auc, accuracy)
  )
```

```{r logistic regression results}
logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()
```

```{r}
logit_fit |> show_best(metric = "roc_auc")
```

```{r}
logit_best <- logit_fit |>
  select_best(metric = "roc_auc")

logit_best
```

```{r finalize logistic regression}
logit_final <- logit_wf |>
  finalize_workflow(logit_best)
logit_final
```

```{r logistic regression fit}
logit_fit_final <- logit_final |>
  last_fit(data_split)
```

#### Random Forest

```{r random forest preprocessing}
rf_rec <- recipe(los_long ~ ., data = mimiciv_icu_cohort_train) |>
  # Mean inputation for normal variables
  step_impute_mean(bicarbonate, chloride, hematocrit, sodium, heart_rate) |>
  
  # Median imputation for skewed variables
  step_impute_median(creatinine, glucose, potassium, wbc, 
                     non_invasive_blood_pressure_diastolic, 
                     non_invasive_blood_pressure_systolic, 
                     respiratory_rate, temperature_fahrenheit) |>
  
  # KNN imputation for categorical variables
  step_impute_knn(marital_status) |>
  
  # zero-variance filter
  step_zv(all_nominal_predictors()) |>
  print()
```

```{r random forest model}
rf_mod <- rand_forest(
  mode = "classification",
  mtry = tune(), # number of predictors randomly sampled in each split
  trees = tune() # number of trees in ensemble
) |>
  set_engine("ranger")
rf_mod
```
```{r random forest workflow}
rf_wf <- workflow() |>
  add_recipe(rf_rec) |>
  add_model(rf_mod)
rf_wf
```

```{r random forest grid}
rf_grid <- grid_regular(
  trees(range = c(200L, 800L)),
  mtry(range = c(1L, 8L)),
  levels = c(2, 4)
  )
rf_grid
```

```{r random forest fit, cache=TRUE}
set.seed(203)

folds <- vfold_cv(mimiciv_icu_cohort_train, v = 5, strata = los_long)
folds

rf_fit <- rf_wf |>
  tune_grid(
    resamples = folds,
    grid = rf_grid,
    metrics = metric_set(roc_auc, accuracy)
  )
rf_fit
```

```{r}
rf_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) +
  geom_point() +
  labs(x = "Num. of Trees", y = "CV AUC")
```

```{r random forest best}
rf_fit |> show_best(metric = "roc_auc")

rf_best <- rf_fit |>
  select_best(metric = "roc_auc")
rf_best
```

```{r finalize random forest}
rf_final <- rf_wf |>
  finalize_workflow(rf_best)
rf_final
```

```{r, cache=TRUE}
rf_fit_final <- rf_final |>
  last_fit(data_split)
rf_fit_final
```

#### XGBoost

```{r XGBoost preprocessing}
gb_rec <- recipe(los_long ~ ., data = mimiciv_icu_cohort_train) |>
  # Mean inputation for normal variables
  step_impute_mean(bicarbonate, chloride, hematocrit, sodium, heart_rate) |>
  
  # Median imputation for skewed variables
  step_impute_median(creatinine, glucose, potassium, wbc, 
                     non_invasive_blood_pressure_diastolic, 
                     non_invasive_blood_pressure_systolic, 
                     respiratory_rate, temperature_fahrenheit) |>
  
  # KNN imputation for categorical variables
  step_impute_knn(marital_status) |>
  
  # create dummy variable
  step_dummy(all_nominal_predictors()) |>
  
  # zero-variance filter
  step_zv(all_nominal_predictors()) |>
  print()
```

```{r XGBoost model}
gb_mod <- boost_tree(
  mode = "classification",
  trees = 1000,
  tree_depth = tune(),
  learn_rate = tune()
) |>
  set_engine("xgboost")
gb_mod
```
```{r XGBoost workflow}
gb_wf <- workflow() |>
  add_recipe(gb_rec) |>
  add_model(gb_mod)
gb_wf
```

```{r XGBoost grid}
gb_grid <- grid_regular(
  tree_depth(range = c(3L, 10L)),
  learn_rate(range = c(0.01, 0.3)),
  levels = c(2, 2)
  )
gb_grid
```

```{r XGBoost fit, cache=TRUE}
set.seed(203)

folds <- vfold_cv(mimiciv_icu_cohort_train, v = 5, strata = los_long)
folds

gb_fit <- gb_wf |>
  tune_grid(
    resamples = folds,
    grid = gb_grid,
    metrics = metric_set(roc_auc, accuracy)
  )
gb_fit
```

```{r}
gb_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC")
```

```{r}
gb_fit |> show_best(metric = "roc_auc")

gb_best <- gb_fit |>
  select_best(metric = "roc_auc")
gb_best
```

```{r finalize XGBoost}
gb_final <- gb_wf |>
  finalize_workflow(gb_best)
gb_final
```

```{r}
gb_fit_final <- gb_final |>
  last_fit(data_split)
gb_fit_final
```

#### Model Stacking

```{r}
stacks_recipe <- recipe(los_long ~ ., data = mimiciv_icu_cohort_train) |>
  # Mean inputation for normal variables
  step_impute_mean(bicarbonate, chloride, hematocrit, sodium, heart_rate) |>
  
  # Median imputation for skewed variables
  step_impute_median(creatinine, glucose, potassium, wbc, 
                     non_invasive_blood_pressure_diastolic, 
                     non_invasive_blood_pressure_systolic, 
                     respiratory_rate, temperature_fahrenheit) |>
  
  # KNN imputation for categorical variables
  step_impute_knn(marital_status) |>
  
  # create dummy variable
  step_dummy(all_nominal_predictors()) |>
  
  # zero-variance filter
  step_zv(all_nominal_predictors()) |>
  print()
stacks_recipe
```

```{r}
set.seed(203)
folds <- vfold_cv(mimiciv_icu_cohort_train, v = 2)
```

```{r logistic regression, cache=TRUE}
logit_mod <- logistic_reg(
  penalty = tune(),
  mixture = tune()
) |>
  set_engine("glmnet", standardize = TRUE)

logit_wf <- workflow() |>
  add_recipe(stacks_recipe) |>
  add_model(logit_mod)

logit_grid <- grid_regular(
  penalty(range = c(-4, 1)),
  mixture(),
  levels = c(10, 3)
  )

logit_res <- 
  tune_grid(
    object = logit_wf,
    resamples = folds,
    grid = logit_grid,
    control = control_stack_grid()
  )
logit_res
```

```{r random forest, cache=TRUE}
rf_mod <- rand_forest(
  mode = "classification",
  mtry = tune(), # number of predictors randomly sampled in each split
  trees = tune() # number of trees in ensemble
) |>
  set_engine("ranger")

rf_wf <- workflow() |>
  add_recipe(stacks_recipe) |>
  add_model(rf_mod)

rf_grid <- grid_regular(
  trees(range = c(200L, 1000L)),
  mtry(range = c(1L, 8L)),
  levels = c(2, 2)
  )

rf_res <- tune_grid(
  object = rf_wf,
  resamples = folds,
  grid = rf_grid,
  control = control_stack_grid()
)
rf_res
```

```{r XGBoost, cache=TRUE}
gb_mod <- boost_tree(
  mode = "classification",
  trees = 1000,
  tree_depth = tune(),
  learn_rate = tune()
) |>
  set_engine("xgboost")
gb_mod

gb_wf <- workflow() |>
  add_recipe(stacks_recipe) |>
  add_model(gb_mod)

gb_grid <- grid_regular(
  tree_depth(range = c(3L, 10L)),
  learn_rate(range = c(0.01, 0.3)),
  levels = c(1, 2)
  )

gb_res <- tune_grid(
  object = gb_wf,
  resamples = folds,
  grid = gb_grid,
  control = control_stack_grid()
  )
gb_res
```

```{r}
model_st <- stacks() |>
  add_candidates(logit_res) |>
  add_candidates(rf_res) |>
  add_candidates(gb_res) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-6:2),
    metrics = c("roc_auc")
  ) |>
  # fit candidates with nonzero stacking coefficients
  fit_members()
```

```{r}
model_st
```

```{r}
autoplot(model_st)
```

```{r}
autoplot(model_st, type = "members")
```

```{r}
autoplot(model_st, type = "weights")
```

```{r}
collect_parameters(model_st, "rf_res")
```

```{r}
mimic_pred <- mimiciv_icu_cohort_test %>%
  bind_cols(predict(model_st, ., type = "prob")) %>%
  print(width = Inf)
```

### 4. Compare model classification performance on the test set. 

Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?

#### Logistic Regression


```{r logistic regression results test}
logit_fit_final |>
  collect_metrics()
```

The best logistic regression model has accuracy of 0.567 and roc_auc of 0.59. The results shows that 56.7% of ICU stay length are correctly classified by the model. The ROC AUC measures the model's ability to distinguish between classes. The score of 0.59 suggests that the model performs slightly better than random guessing (0.5).


#### Random Forest

```{r}
rf_fit_final |>
  collect_metrics()
```

The accuracy of random forest model is 0.58, meaning 58% of models are correctly predicted.
The ROC AUC is 0.62, which is means 62% of the time the model distinguish the classes successfully.

#### XGBoost

```{r}
gb_fit_final |>
  collect_metrics()
```

The accuracy of XGBoost model is 0.56%, meaning 56% of los_long are correctly predicted.
The ROC AUC of 0.58 means that 58% of the time the model distinguish the classes successfully.

#### Model Stacking

```{r}
yardstick::roc_auc(
  mimic_pred,
  truth = los_long,
  contains(".pred_FALSE")
)
```
The ROC_AUC of model stacking is 0.3687729. which shows that it's not successfully predicted the los_long.

#### Most important features
```{r}
logit_fit_final |> 
  extract_fit_parsnip() |>
  tidy() |>
  arrange(desc(estimate))
```
Based on the best logistic model, the most important features with the largest estimates are first_careunit_Medical.Surgical.Intensive.Care.Unit..MICU.SICU., hematocrit, non_invasive_blood_pressure_systolic, first_careunit_Medical.Intensive.Care.Unit..MICU., and chloride.

#### Compare performance and interpretablity

Comparing the accuracy and roc auc of 4 models, the first 3 models, logistic regression, random forest, and XGBoost, have similar performance in accuracy. Random Forest has the highest roc auc among the 3 models. 
The stacking model performed poorly, which an ROC AUC below 0.5, indicating it performs worse than random guessing. This suggests issues with the model blending or that the individual models may not complement each other well.

**Logistic regression** is the most interpretable among all 4 models. The coefficients directly show the effect of each feature on the outcome. It's excellent for understanding relationships in data.
**Random Forest** provides variable importance, but understanding individual predictions can be difficult.
**XGBoost** is even more complex, though feature importance and SHAP values can offer insights into how predictions are made.
**Model Stacking** is the hardest to interpret since it’s a combination of other models, making it a “black-box” approach.