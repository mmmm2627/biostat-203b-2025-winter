---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 21 @ 11:59PM"
author: "Your Name and UID"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(data.table)
library(arrow)
library(dplyr)
library(lubridate)
library(ggplot2)
library(DBI)
library(duckdb)
library(scales)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png)
Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

**Solution:**

Read info with `subject_id = 10063848`:
```{r}
id <- 10063848

# Read info from patients.csv.gz
file_path <- '~/mimic/hosp/patients.csv.gz'
patient <- fread(file_path)
patient <- patient[subject_id == id]

# Read info from admissions.csv.gz
file_path <- '~/mimic/hosp/admissions.csv.gz'
admissions <- fread(file_path)
admissions <- admissions[subject_id == id]

# Read info from transfers.csv.gz
file_path <- '~/mimic/hosp/transfers.csv.gz'
transfers <- fread(file_path)
transfers <- transfers[subject_id == id]

# Read info from labevents.csv.gz
labevents <- open_dataset("labevents_pq", format = "parquet")
labevents <- labevents %>%
  filter(subject_id == id) %>%
  collect()

# Read info from procedures_icd.csv.gz
file_path <- '~/mimic/hosp/procedures_icd.csv.gz'
procedures <- fread(file_path)
procedures <- procedures[subject_id == id]

# Read info from diagnoses_icd.csv.gz, d_icd_procedures.csv.gz, 
# d_icd_diagnoses.csv.gz
file_paths <- c('~/mimic/hosp/diagnoses_icd.csv.gz',
                '~/mimic/hosp/d_icd_procedures.csv.gz',
                '~/mimic/hosp/d_icd_diagnoses.csv.gz')
diagnoses <- fread(file_paths[1]) %>%
  filter(subject_id == id)

d_icd_procedures <- fread(file_paths[2])
d_icd_diagnoses <- fread(file_paths[3])
```

Merge information needed for the plot:
```{r}
# X-axis: Calender time
# Y-axis: type of event (ADT, lab, procedure)
# Legend: color of line segment (care unit), size (whether ICU or not)
# Legend: crosses of line (lab events)
# Legend: shape of procedure plot (type of procedure)
# Title: patient ID, gender, age, race
# Subtitle: top 3 diagnoses

# Patient information
patient_info <- patient |> 
  left_join(admissions, by = "subject_id") |> # get race from admissions
  select(subject_id, gender, anchor_age, race) |>
  distinct()

# Get top 3 diagnoses
top_3_diagnoses <- diagnoses |>
  count(icd_code, sort = TRUE) |>
  arrange(desc(n)) |>
  head(3) |>
  left_join(d_icd_diagnoses, by = "icd_code") |>
  select(long_title)
# top_3_diagnoses_str <- paste(top_3_diagnoses$long_title, collapse = ', ')

# Prepare Lab Events
Lab <- labevents |> 
  select(subject_id, charttime) |>
  rename(event_time = charttime) |>
  mutate(event_type = "Lab",
         event_time = as_date(event_time))

# Prepare ADT
ADT <- transfers |>
  select(subject_id, careunit, intime, outtime) |>
  mutate(
    intime = as_date(ymd_hms(intime)),  # Convert to date
    outtime = as_date(ymd_hms(outtime)),  # Convert to date
    event_type = "ADT",
    is_icu = ifelse(careunit == "Surgical Intensive Care Unit (SICU)", 
                    TRUE, FALSE)
  )

# Prepare Procedures
proc <- procedures |>
  select(subject_id, chartdate, icd_code) |>
  left_join(d_icd_procedures, by = 'icd_code') |>
  rename(event_time = chartdate,
         procedure_type = long_title) |>
  mutate(event_type = "Procedure",
         event_time = as_date(event_time))

# Combine all events into single dataset
events <- bind_rows(
  ADT |> select(subject_id, event_time = intime, event_type, careunit, is_icu),
  ADT |> select(subject_id, event_time = outtime, event_type, careunit, is_icu),
  Lab |> select(subject_id, event_time, event_type),
  proc |> select(subject_id, event_time, event_type, procedure_type)
) |>
  mutate (event_type = factor(
    event_type, levels = c("ADT", "Lab", "Procedure")
  ))
```

Plot the figure:
```{r}
plot_title <- paste(
  "Patient ", patient_info$subject_id, 
  ", ", patient_info$gender, 
  ", ", patient_info$anchor_age, 
  " years old, ", tolower(patient_info$race)
)
plot_subtitle <- paste(
  top_3_diagnoses$long_title[1], "\n",
  top_3_diagnoses$long_title[2], "\n",
  top_3_diagnoses$long_title[3],
  sep = ""
)
```

```{r plot ADT, fig.align="center", fig.width = 8, dpi=250, warning=FALSE}
ggplot(events, 
       aes(x = event_time, y = event_type)) +
  
  scale_y_discrete(limits = c("Procedure", "Lab", "ADT")) +
  
  # Procedure Events as different shapes
  geom_point(
    data = proc,
    aes(x = event_time, y = event_type, shape = procedure_type),
    size = 3) +
  
  # ADT as line segment
  geom_segment(
    data = ADT,
    aes(x = intime, xend = outtime, y = event_type, yend = event_type, 
        color = careunit, linewidth = as.factor(is_icu))) +
  
  # Lab Events as Crosses
  geom_point(
    data = Lab,
    aes(x = event_time, y = event_type),
    shape = 3, size = 2) +
  
  # Formatting
  labs(
    title = plot_title,
    subtitle = plot_subtitle,
    x = "Calender Time",
    y = NULL,
    color = "Care Unit",
    shape = "Procedure"
  ) +

  # Legend settings: color and shape
  guides(
    # Removes the legend for the line thickness (linewidth)
    linewidth = "none", 
    # Title for shape legend
    shape = guide_legend(title = "Procedure", nrow = 3, order = 2),
    # Title for color legend
    color = guide_legend(title = "Care Unit", nrow = 2, order = 1)
  ) +
  
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",  # Stack legends horizontally
    legend.text = element_text(size = 6),
    # legend.spacing.y = unit(0.1, "cm"),
    axis.text.x = element_text(hjust = 1)
  )
```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`.

**Solution:**

Read info with `subject_id = 10063848`:
```{r}
id <- 10063848

# Read info from d_items.csv.gz
file_path <- "~/mimic/icu/d_items.csv.gz"
d_items <- fread(file_path)
```

```{r, cache=TRUE}
# Read info from chartevents.csv.gz
con <- dbConnect(duckdb::duckdb(), dbdir = ":memory:")

chartevents <- dbGetQuery(con, "
  SELECT subject_id, stay_id, charttime, itemid, value
  FROM read_csv_auto('~/mimic/icu/chartevents.csv.gz')
  WHERE subject_id = 10063848
")

dbDisconnect(con)
```

Merge information for plotting:
```{r}
# vitals information
vitals <- chartevents |>
  left_join(d_items, by = "itemid") |>
  filter(abbreviation %in% c("HR", "NBPd", "NBPs", "RR", "Temperature F")) |>
  select(subject_id, stay_id, charttime, value, abbreviation) |>
  mutate(charttime = as.POSIXct(charttime, format = "%Y-%m-%d %H:%M:%S"))
```

```{r plot ICU stays, fig.align="center", fig.width = 10, fig.height = 10, dpi=250, warning=FALSE}
# x-axis: calender time
# y-axis: value of vitals
# color: type of vitals
# facet grid: stay ID

ggplot(vitals, aes(x = charttime, y = value, group = abbreviation,
                   color = abbreviation)) +
  geom_point() +
  geom_line() +
  facet_grid(abbreviation ~ stay_id, scales = "free") +
  
  labs(
    title = paste("Patient", unique(vitals$subject_id), 
                  "ICU stays - Vitals", sep = " ")
  ) +
  
  theme_light() +
  theme(
    legend.position = "none",
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  
  scale_x_datetime(date_labels = "%b %d %H:%M") +
  scale_y_discrete(breaks = function(x) x[seq(1, length(x), by = 5)])
```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`. 

**Solution:**
```{r}
# Read info from icustays.csv.gz
file_path <- "~/mimic/icu/icustays.csv.gz"
icustays_tble <- fread(file_path) |> as_tibble()
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs. 

**Solution:**
```{r}
length(unique(icustays_tble$subject_id))
```
There are 65366 unique `subject_id`.

```{r, warning=FALSE}
icustays_tble_count <- icustays_tble |>
  group_by(subject_id) |>
  summarise(num_stays = n()) |>
  ungroup()

ggplot(icustays_tble_count, aes(x = num_stays)) +
  geom_histogram(binwidth = 1) +
  labs(
    title = "Distribution of number of ICU Stays per Subject",
    x = "Number of ICU Stays",
    y = "Count"
  ) +
  theme_minimal()
```

```{r clean unneeded variables}
rm(ADT, chartevents, con, d_icd_diagnoses, d_icd_procedures,
   d_items, diagnoses, events, icustays_tble_count, Lab, labevents,
   patient, patient_info, proc, procedures, top_3_diagnoses, transfers, 
   vitals, admissions)
gc()
```

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

**Solution:**
```{r}
# Read info from admissions.csv.gz
file_path <- "~/mimic/hosp/admissions.csv.gz"
admissions_tble <- fread(file_path) |> as_tibble()
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?)  

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

**Solution:**
```{r}
admissions_tble_count <- admissions_tble |>
  group_by(subject_id) |>
  summarise(num_admissions = n()) |>
  ungroup()

admissions_tble <- admissions_tble |>
  mutate(admittime = ymd_hms(admittime),
         dischtime = ymd_hms(dischtime),
         admission_hour = hour(admittime),
         admission_minute = minute(admittime),
         los_days = as.numeric(dischtime - admittime, units = "days"),
         los_hours = as.numeric(dischtime - admittime, units = "hours"))
```

Visualizations of information:
```{r, warning=FALSE}
# number of admissions per patient
ggplot(admissions_tble_count, aes(x = num_admissions)) +
  geom_histogram() +
  labs(
    title = "Distribution of Number of admissions per Patient",
    x = "Number of admissions",
    y = "Count"
  ) +
  theme_minimal()
```
The number of admission per patient is right skewed.

```{r}
# admission hour
ggplot(admissions_tble, aes(x = admission_hour)) +
  geom_histogram(bins = 24) +
  labs(
    title = "Distribution of Admission Hour",
    x = "Admission Hour",
    y = "Count"
  ) +
  theme_minimal()
```
In general, admissions decrease from 12 AM to 10 AM and then rise again until midnight, peaking around 6 PM. Interestingly, there is a noticeable spike in admissions at 7 AM compared to the surrounding hours.


```{r, warning=FALSE}
# admission minute
ggplot(admissions_tble, aes(x = admission_minute)) +
  geom_histogram(bins = 60) +
  labs(
    title = "Distribution of Admission Minute",
    x = "Admission Minute",
    y = "Count"
  ) +
  theme_minimal()
```
In general, admission minutes are uniformly distributed. 
However, there are noticeable spikes at whole hours, as well as at the 15-minute, 30-minute, and 45-minute marks.

```{r, warning=FALSE}
# length of hospital stay
ggplot(admissions_tble, aes(x = los_days)) +
  geom_histogram() +
  labs(
    title = "Distribution of Length of Hospital Stay",
    x = "Length of Stays (Days)",
    y = "Count"
  ) +
  theme_minimal()
```
Length of stays distribution is right skewed. No unusual pattern identified.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.
```{r}
# import patients.csv.gz
file_path <- "~/mimic/hosp/patients.csv.gz"
patients_tble <- fread(file_path) |> as_tibble()
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.
```{r}
# summarize gender
ggplot(patients_tble, aes(x = gender)) +
  geom_bar() +
  labs(
    title = "Distribution of Gender",
    x = "Gender"
  ) +
  theme_minimal()
```
There are slightly more female patients than male patients.

```{r}
# summarize anchor_age
ggplot(patients_tble) +
  geom_histogram(aes(x = anchor_age, fill = gender), binwidth = 1) +
  labs(
    title = "Distribution of Anchor Year by Gender",
    x = "Anchor Year"
  ) +
  theme_minimal()
```
The distribution of Anchor Age peaks in the early years, then decreases from 25 to 40, 
followed by a slight increase before steadily declining from 40 to 80 years. 
Interestingly, there is an outlier with an extremely high value for both male and female patients.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)


Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

**Solution:**
```{r}
itemids <- c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)

file_path <- "~/mimic/hosp/d_labitems.csv.gz"
d_labitems <- fread(file_path) |>
  filter(itemid %in% itemids) |>
  select(itemid, label)
d_labitems

rename_vec <- setNames(d_labitems$label, d_labitems$itemid)
```

```{r}
labevents_tble <- open_dataset("labevents_pq", format = "parquet") |>
  to_duckdb() |>
  # only keep information needed from labevents
  select(subject_id, itemid, storetime, valuenum) |>
  # filter itemid
  filter(itemid %in% itemids) |>
  # merge with icustays to get stay information
  left_join(
    select(icustays_tble, subject_id, stay_id, intime),
    by = c("subject_id"),
    copy = TRUE # copy icustay table from memory to database
  ) |>
  # only keep labevents before the ICU stay
  filter(storetime < intime) |>
  # for each patient, icu stay, itemid combination
  group_by(subject_id, stay_id, itemid) |>
  # only keep the most recent labevent
  slice_max(storetime, n = 1) |>
  # discard storetime and intime
  select(-storetime, -intime) |>
  ungroup() |>
  # record lab items to be columns
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  # rename column names from itemid to label
  rename_at(
    vars(names(rename_vec)), ~rename_vec[.]
  ) |>
  rename_with(tolower) |>
  rename(wbc = `white blood cells`) |>
  arrange(subject_id, stay_id) |>
  # reorder column
  select(
    subject_id, stay_id, bicarbonate, chloride, creatinine, 
    glucose, potassium, sodium, hematocrit, wbc) |>
  collect() |>
  as_tibble()
```

```{r}
labevents_tble
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

**Solution:**
```{r}
itemids <- c(220045, 220179, 220180, 223761, 220210)
file_path <- "~/mimic/icu/d_items.csv.gz"
d_items <- fread(file_path) |>
  filter(itemid %in% itemids) |>
  select(itemid, label)
d_items <- d_items |>
  mutate(label = tolower(gsub(" ", "_", label)))
d_items


rename_vec <- setNames(d_items$label, d_items$itemid)
```

```{r}
chartevents_tble <- open_dataset("chartevents_pq", format = "parquet") |>
  to_duckdb() |>
  # only keep information needed for chartevents
  select(subject_id, itemid, storetime, valuenum) |>
  # filter itemid
  filter(itemid %in% itemids) |>
  # merge with icustays to get stay information
  left_join(
    select(icustays_tble, subject_id, stay_id, intime, outtime),
    by = c("subject_id"),
    copy = TRUE
  ) |>
  # only keep chartevents within the ICU stay
  filter(storetime >= intime & storetime <= outtime) |>
  # group by each patient, icu stay, itemid combination
  group_by(subject_id, stay_id, itemid, storetime) |>
  # get the average for measurement with same storetime
  mutate(valuenum = mean(valuenum, na.rm = TRUE)) |>
  ungroup() |>
  group_by(subject_id, stay_id, itemid) |>
  # only keep the first vital measurement
  slice_min(storetime, n = 1) |>
  # discard storetime, intime, and outtime
  select(-storetime, -intime, -outtime) |>
  ungroup() |>
  # record chart items to be columns
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  collect() |>
  as_tibble()
```

```{r}
chartevents_tble <- chartevents_tble |>
  rename_at(
    vars(names(rename_vec)),  # Select columns to rename
    ~ rename_vec[.]  # Apply renaming function
  ) |>
  arrange(subject_id, stay_id) |>
  select(
    subject_id, stay_id, heart_rate, non_invasive_blood_pressure_diastolic,
    non_invasive_blood_pressure_systolic, respiratory_rate, 
    temperature_fahrenheit)
```

```{r}
chartevents_tble
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

**Solution:**

```{r}
mimic_icu_cohort <- icustays_tble |>
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  left_join(patients_tble, by = "subject_id") |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  mutate(age_intime = year(intime) - (anchor_year - anchor_age)) |>
  filter(age_intime >= 18)
```

```{r}
mimic_icu_cohort
```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

- Length of ICU stay `los` vs the last available lab measurements before ICU stay

- Length of ICU stay `los` vs the first vital measurements within the ICU stay

- Length of ICU stay `los` vs first ICU unit

**Solution:**

Length of ICU stay vs. demographic variables
```{r}
# Length of ICU stay vs. Race
los_race_summary <- mimic_icu_cohort %>%
  group_by(race) %>%
  summarize(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    IQR_los = IQR(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    .groups = "drop"
  )
los_race_summary
```

```{r, warning=FALSE}
# Length of ICU stay vs. insurance
ggplot(mimic_icu_cohort, aes(x = insurance, y = los, fill = insurance)) +
  geom_boxplot() +
  labs(
    title = "ICU Length of Stay by Insurance Type", 
    x = "Insurance", 
    y = "Length of Stay (days)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

los_insurance_summary <- mimic_icu_cohort %>%
  group_by(insurance) %>%
  summarize(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    IQR_los = IQR(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    .groups = "drop"
  )
los_insurance_summary
```

```{r, warning=FALSE}
# Length of ICU stay vs. marital_status
los_marital_status_summary <- mimic_icu_cohort %>%
  mutate(marital_status = ifelse(
    marital_status == "", "OTHER", marital_status)) %>%
  group_by(marital_status) %>%
  summarize(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    IQR_los = IQR(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    .groups = "drop"
  )
los_marital_status_summary

ggplot(mimic_icu_cohort, aes(x = marital_status, y = los, 
                             fill = marital_status)) +
  geom_boxplot() +
  labs(
    title = "ICU Length of Stay by marital_status", 
    x = "Marital Status", 
    y = "Length of Stay (days)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r, warning=FALSE}
# Length of ICU stay vs. gender
los_gender_summary <- mimic_icu_cohort %>%
  group_by(gender) %>%
  summarize(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    IQR_los = IQR(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    .groups = "drop"
  )
los_gender_summary

# Boxplot for LOS by Gender
ggplot(mimic_icu_cohort, aes(x = gender, y = los, fill = gender)) +
  geom_boxplot() +
  labs(title = "ICU Length of Stay by Gender", 
       x = "Gender", y = "Length of Stay (days)") +
  theme_minimal()

# Length of ICU stay vs. age at intime
ggplot(mimic_icu_cohort, aes(x = age_intime, y = los)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", color = "blue") +
  labs(title = "ICU Length of Stay vs. Age", 
       x = "Age at ICU Admission", y = "Length of Stay (days)") +
  theme_minimal()
```

Length of ICU stay `los` vs the last available lab measurements before ICU stay
```{r, warning=FALSE}
mimic_icu_cohort_long <- mimic_icu_cohort %>%
  pivot_longer(cols = c(bicarbonate, chloride, creatinine, glucose, 
                        potassium, sodium, hematocrit, wbc),
               names_to = "lab_name", values_to = "lab_value")

ggplot(mimic_icu_cohort_long, aes(x = lab_value, y = los)) +
  # Scatter plot with transparency to reduce overplotting
  geom_point(alpha = 0.3) +  
  geom_smooth(method = "lm", color = "blue", se = TRUE) + 
  # Separate plots for each lab item
  facet_wrap(~lab_name, scales = "free_x") +  
  labs(title = "ICU Length of Stay vs. Last Available Lab Measurements",
       x = "Lab Value",
       y = "Length of Stay (days)") +
  theme_minimal()
```

Length of ICU stay `los` vs the first vital measurements within the ICU stay
```{r, warning=FALSE}
mimic_icu_vitals_long <- mimic_icu_cohort %>%
  pivot_longer(cols = c(heart_rate, non_invasive_blood_pressure_systolic, 
                        non_invasive_blood_pressure_diastolic, 
                        respiratory_rate, temperature_fahrenheit),
               names_to = "vital_sign", values_to = "value")

ggplot(mimic_icu_vitals_long, aes(x = value, y = los)) +
  geom_point(alpha = 0.3) +  # Scatter points with transparency
  geom_smooth(method = "lm", color = "blue", se = TRUE) +  
  facet_wrap(~vital_sign, scales = "free_x") +  
  labs(title = "ICU Length of Stay vs. Vital measurement",
       x = "Vital Sign Value",
       y = "Length of Stay (days)") +
  theme_minimal()
```

Length of ICU stay los vs first ICU unit
```{r, fig.width=15, dpi=250, warning=FALSE}
ggplot(mimic_icu_cohort, 
       aes(x = first_careunit,  y = los, fill = first_careunit)) +
  geom_boxplot() + 
  labs(title = "ICU Length of Stay (LOS) by First ICU Unit",
       x = "First ICU Unit",
       y = "Length of Stay (days)") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(hjust = 1),
    legend.position = "bottom") +
  coord_flip()
```

